#
# Copyright (C) 2022 Red Hat, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
 
name: next build

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:

  tag:
    name: Tagging
    runs-on: ubuntu-20.04
    outputs:
      githubTag: ${{ steps.TAG_UTIL.outputs.githubTag}}
    steps:
      - uses: actions/checkout@v2
      - name: Generate tag utilities
        id: TAG_UTIL
        run: |
            CURRENT_DAY=$(date +'%Y%m%d')
            SHORT_SHA1=$(git rev-parse --short HEAD)
            echo "::set-output name=githubTag::$(date +'%Y%m%d%H%M%S')"
            echo "::set-output name=chectlVersion::0.0.$CURRENT_DAY-next"
            echo "::set-output name=githubReleaseName::0.0.$CURRENT_DAY-next.$SHORT_SHA1"
      - name: tag
        run: |
          git config --local user.name ${{ github.actor }}
          sed -i  "s#version\":\ \"\(.*\)\",#version\":\ \"${{ steps.TAG_UTIL.outputs.chectl_version }}\",#g" package.json
          git tag ${{ steps.TAG_UTIL.outputs.gh_tag }}
          git push origin ${{ steps.TAG_UTIL.outputs.gh_tag }}

  windows:
    needs: tag
    name: Windows
    runs-on: windows-2022
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.tag.outputs.githubTag}}
      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: yarn
        run: |
          yarn --frozen-lockfile --network-timeout 180000

      - name: Run Build
        timeout-minutes: 20
        run: yarn compile:next

  linux:
    needs: tag
    name: Linux
    runs-on: ubuntu-20.04
    timeout-minutes: 40
    steps:

      - name: setup env
        run: sudo snap install snapcraft --classic  

      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.tag.outputs.githubTag}}

      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Execute yarn
        run: yarn --frozen-lockfile --network-timeout 180000

      - name: Run Build
        timeout-minutes: 20
        run: yarn compile:next

  darwin:
    needs: tag
    name: macOS
    runs-on: macos-11
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.tag.outputs.githubTag}}

      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Execute yarn
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: yarn --frozen-lockfile --network-timeout 180000

      - name: Run Build
        timeout-minutes: 20
        run: yarn compile:next

